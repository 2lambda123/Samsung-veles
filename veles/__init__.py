# -*- coding: utf-8 -*-
'''
Created on May 21, 2013

Copyright (c) 2013 Samsung Electronics Co., Ltd.
'''


from email.utils import parsedate_tz, mktime_tz
from sys import version_info
from warnings import warn


__project__ = "Veles Machine Learning Platform"
__version__ = "0.4.2"
__license__ = "Samsung Proprietary License"
__copyright__ = "Â© 2013 Samsung Electronics Co., Ltd."
__authors__ = ["Gennady Kuznetsov", "Vadim Markovtsev", "Alexey Kazantsev",
               "Lyubov Podoynitsina", "Denis Seresov", "Dmitry Senin",
               "Alexey Golovizin", "Egor Bulychev", "Ernesto Sanches"]

try:
    __git__ = "$Commit$"
    __date__ = mktime_tz(parsedate_tz("$Date$"))
except Exception as ex:
    warn("Cannot expand variables generated by Git, setting them to None")
    __git__ = None
    __date__ = None

if version_info.major == 3 and version_info.minor == 4 and \
   version_info.micro < 1:
    warn("Python 3.4.0 has a bug which is critical to Veles OpenCL subsystem ("
         "see issue #21435). It is recommended to upgrade to 3.4.1.")

from veles.logger import Logger
from veles.units import Unit, IUnit
from veles.opencl_units import OpenCLUnit, OpenCLWorkflow
from veles.workflow import Workflow


__units__ = None


def registered_units():
    global __units__
    if __units__ is not None:
        return __units__

    import os
    import sys

    # Temporarily disable standard output since some modules spam during import
    stdout = sys.stdout
    with open(os.devnull, 'w') as null:
        sys.stdout = null
    for root, _, files in os.walk(os.path.dirname(__file__)):
        if root.find('tests') >= 0:
            continue
        for file in files:
            modname, ext = os.path.splitext(file)
            if ext == '.py':
                try:
                    sys.path.insert(0, root)
                    __import__(modname)
                    del sys.path[0]
                except:
                    pass
    sys.stdout = stdout
    from veles.units import UnitRegistry
    __units__ = UnitRegistry.units
    return __units__
